pipeline {
    agent any

    tools {
        // CORRECTED: Changed 'dependencyCheck' to 'dependency-check' (with a hyphen)
        // This 'dependency-check' name must match the actual tool name
        // as recognized by the plugin, which the error message confirms.
        dependency-check 'Default' // 'Default' should still be the name you configured in Global Tool Configuration
    }

    stages {
        stage('Clone Repository') {
            steps {
                git url: 'https://github.com/gkxol/html-portfolio.git', branch: 'main'
            }
        }

        stage('Build (Validate HTML)') {
            steps {
                echo "No build step required for static HTML."
            }
        }

        stage('Security Scan (Dependency Check)') {
            steps {
                echo "Running OWASP Dependency-Check..."
                // CORRECTED: Reverted to a simpler 'dependencyCheck()' call if the 'tools' block handles it.
                // If it still errors, we will explore direct parameter mapping,
                // but usually the plugin handles it after the tool is declared.
                // The parameters like scanPath, format, autoUpdate, failBuildOnCVSS might need to be
                // within a closure or different syntax depending on the exact plugin version.
                // Let's try the simplest form first.
                // If this fails, we will explicitly try parameters like:
                // dependencyCheck(args: '--scan . --format HTML --autoUpdate --failOnCVSS 7.0')
                
                // Let's go with the most common and robust approach given the errors:
                // Using the 'withTools' syntax and passing arguments as a string.
                // This bypasses the named parameter issues directly.
                withTools([dependencyCheck: 'Default']) {
                    sh 'dependency-check --scan . --format HTML --enableAutoUpdate --failOnCVSS 7.0 --project "HTML Portfolio" --out "dependency-check-report"'
                }
            }
            post {
                always {
                    // This step parses the reports generated by the 'sh' command and publishes them.
                    // If you specified '--out "dependency-check-report"' above, make sure
                    // the publisher also looks in that directory.
                    dependencyCheckPublisher pattern: 'dependency-check-report/dependency-check-report.html' // Adjust pattern as needed
                }
            }
        }

        stage('Code Quality Scan (SonarQube)') {
            steps {
                echo "Running SonarQube analysis..."
                withSonarQubeEnv(credentialsId: 'sonarqube-token', installationName: 'Default SonarQube Scanner') {
                    sh "sonar-scanner \
                       -Dsonar.projectKey=html-portfolio-project \
                       -Dsonar.sources=. \
                       -Dsonar.projectName='HTML Portfolio' \
                       -Dsonar.projectVersion=1.0"
                }
            }
            post {
                success {
                    echo 'SonarQube analysis successful.'
                    // timeout(time: 5, unit: 'MINUTES') {
                    //     waitForQualityGate abortPipeline: true
                    // }
                }
                failure {
                    echo 'SonarQube analysis failed or Quality Gate failed.'
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/*.html, **/*.png, **/*.md, dependency-check-report/*', allowEmptyArchive: true
            }
        }

        stage('Deploy (optional)') {
            when {
                branch 'main'
            }
            steps {
                echo 'Deploy step placeholder. Example: rsync or GitHub Pages deploy here.'
            }
        }
    }

    post {
        success {
            echo 'Site build successful!'
        }
        failure {
            echo 'Build failed.'
        }
    }
}
